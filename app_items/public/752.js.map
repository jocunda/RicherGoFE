{"version":3,"file":"752.js","mappings":"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","sources":["webpack://app_items/../packages/utilities/src/index.ts","webpack://app_items/../packages/items/src/apis.ts","webpack://app_items/./src/components/AppItems/Component.tsx","webpack://app_items/./src/components/AppItems/styles.module.scss?7126","webpack://app_items/./src/App.tsx","webpack://app_items/./src/bootstrap.tsx"],"sourcesContent":["import { redirect } from \"react-router-dom\";\r\nimport type { Response } from \"./types\";\r\n\r\nexport function getToken() {\r\n  const cookieString = document.cookie; // Get cookie string\r\n  console.log(cookieString);\r\n  // const token = cookieString\r\n  //   .split(\";\")\r\n  //   .map((cookie) => cookie.trim())\r\n  //   .find((cookie) => cookie.startsWith(\"token=\"))\r\n  //   ?.split(\"=\")[1]; // Extract token value from cookie string\r\n  // console.log(token);\r\n  // debugger;\r\n  return cookieString;\r\n}\r\n\r\nexport function createLoader(remoteEntry: () => Promise<any>) {\r\n  return async function () {\r\n    let { loader } = await remoteEntry();\r\n    return await loader();\r\n  };\r\n}\r\n\r\nexport function createProtectedLoader(remoteEntry: () => Promise<any>) {\r\n  return async function () {\r\n    let { loader } = await remoteEntry();\r\n    const user = sessionStorage.getItem(\"user\");\r\n\r\n    // Exclude /login path from being recorded as last visited page\r\n    const currentPath = window.location.pathname;\r\n    const isLoginPage = currentPath === \"/login\";\r\n\r\n    //save user last path in session\r\n    sessionStorage.setItem(\"lastVisitedPage\", currentPath);\r\n\r\n    // const data = localStorage.getItem(\"user\");\r\n    if (!user && !isLoginPage) {\r\n      return redirect(\"/login\");\r\n    }\r\n\r\n    const loaderData = await loader();\r\n\r\n    return { user, ...loaderData };\r\n  };\r\n}\r\n\r\nasync function request<T>(\r\n  url: string,\r\n  method: RequestInit[\"method\"],\r\n  requestPayload?: any,\r\n  config?: RequestInit\r\n): Promise<Response<T>> {\r\n  try {\r\n    // const token = getToken();\r\n    const response = await fetch(url, {\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n        // ...(token && { Authorization: `Bearer ${token}` }),\r\n      },\r\n      method,\r\n      ...(requestPayload && { body: JSON.stringify(requestPayload) }),\r\n      ...config,\r\n    });\r\n\r\n    if (response.status === 200) {\r\n      const data = (await response.json()) as T;\r\n      return {\r\n        data,\r\n      };\r\n    } else {\r\n      const errorMessage = (await response.json()) as string;\r\n      return {\r\n        error: response.status,\r\n        errorMessage,\r\n      };\r\n    }\r\n  } catch (error) {\r\n    return {\r\n      error: -1,\r\n      errorMessage: error.toString(),\r\n    };\r\n  }\r\n}\r\n\r\nexport const api = {\r\n  get: <ResponseData>(url: string) => request<ResponseData>(url, \"GET\"),\r\n  post: <ResponseData>(url: string, requestPayload: any) =>\r\n    request<ResponseData>(url, \"POST\", requestPayload),\r\n  put: <ResponseData>(url: string, requestPayload: any) =>\r\n    request<ResponseData>(url, \"PUT\", requestPayload),\r\n  batch: <ResponseData>(url: string, requestPayload: any) =>\r\n    request<ResponseData>(url, \"BATCH\", requestPayload),\r\n  delete: <ResponseData>(url: string) => request<ResponseData>(url, \"DELETE\"),\r\n};\r\n","import { api } from \"@mimo/utilities\";\r\nimport type { GetItemsResponse, Item } from \"./types\";\r\n\r\nexport async function getItem() {\r\n  return api.get<GetItemsResponse>(\"/api/items/itemList\");\r\n}\r\n\r\nexport async function getItemSingle(itemId: string | undefined) {\r\n  return api.get<Item>(`/api/items/${itemId}`);\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\n//styles\r\nimport \"../../styles/index.scss\"\r\nimport styles from './styles.module.scss';\r\nimport {\r\n  TableColumnDefinition,\r\n  createTableColumn,\r\n  Button,\r\n  useScrollbarWidth,\r\n  useFluent,\r\n  TableCellLayout,\r\n  Badge,\r\n} from \"@fluentui/react-components\";\r\nimport {\r\n  EditRegular,\r\n  DeleteRegular,\r\n} from \"@fluentui/react-icons\";\r\n\r\nimport {\r\n  DataGridBody,\r\n  DataGrid,\r\n  DataGridRow,\r\n  DataGridHeader,\r\n  DataGridCell,\r\n  DataGridHeaderCell,\r\n  RowRenderer,\r\n} from '@fluentui-contrib/react-data-grid-react-window';\r\n\r\n// APIs\r\nimport { getItem } from \"@mimo/items\";\r\n// types\r\nimport type { Item, GetItemsResponse } from \"@mimo/items\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\n//datagrid fluentUI\r\nconst columns: TableColumnDefinition<Item>[] = [\r\n\r\n  createTableColumn<Item>({\r\n    columnId: \"code\",\r\n    compare: (a, b) => {\r\n      return a.code.localeCompare(b.code);\r\n    },\r\n    renderHeaderCell: () => {\r\n      return \"Code\";\r\n    },\r\n    renderCell: (item) => {\r\n      return item.code;\r\n    },\r\n  }),\r\n\r\n  createTableColumn<Item>({\r\n    columnId: \"value\",\r\n    compare: (a, b) => {\r\n      return a.value.localeCompare(b.value);\r\n    },\r\n    renderHeaderCell: () => {\r\n      return \"Value\";\r\n    },\r\n    renderCell: (item) => {\r\n      return item.value;\r\n    },\r\n  }),\r\n\r\n  createTableColumn<Item>({\r\n    columnId: \"description\",\r\n    compare: (a, b) => {\r\n      return a.description.localeCompare(b.description);\r\n    },\r\n    renderHeaderCell: () => {\r\n      return \"Classification\";\r\n    },\r\n    renderCell: (item) => {\r\n      const arraySplit = item.description.split(\"#\").filter(Boolean)\r\n      return <>\r\n        <TableCellLayout className={styles.descriptionContainer}>\r\n          {arraySplit.map((classify: string) =>\r\n            <Badge\r\n              appearance=\"tint\"\r\n              className={styles.classBadge}>{classify}</Badge>\r\n          )}\r\n        </TableCellLayout>\r\n      </>\r\n    },\r\n  }),\r\n\r\n  createTableColumn<Item>({\r\n    columnId: \"actions\",\r\n    renderHeaderCell: () => {\r\n      return \"Actions\";\r\n    },\r\n    renderCell: (item) => {\r\n      return (\r\n        <div className={styles.actionsContainer}>\r\n          <Button\r\n            aria-label=\"Edit\"\r\n            appearance=\"subtle\"\r\n            icon={<EditRegular />} >Edit</Button>\r\n          {item.deleteable ?\r\n            <Button\r\n              aria-label=\"Delete\"\r\n              appearance=\"subtle\"\r\n              icon={<DeleteRegular />} >Delete</Button > : \"\"}\r\n        </div>\r\n      );\r\n    },\r\n  }),\r\n];\r\n\r\n//datagrid fluentUI\r\nconst renderRow: RowRenderer<GetItemsResponse> = ({ item, rowId }, style) => (\r\n  <DataGridRow<GetItemsResponse> key={rowId} style={style} >\r\n    {({ renderCell }) => <DataGridCell>{renderCell(item)}</DataGridCell>}\r\n  </DataGridRow>\r\n);\r\n\r\n\r\nexport default function AppItems() {\r\n  //datagrid fluentUI\r\n  const { targetDocument } = useFluent();\r\n  const scrollbarWidth = useScrollbarWidth({ targetDocument });\r\n\r\n  //router\r\n  const navigate = useNavigate();\r\n\r\n  const [itemData, setItemData] = useState<GetItemsResponse>([]);\r\n  //retrieve item data\r\n  useEffect(() => {\r\n    itemDataGet();\r\n  }, []);\r\n\r\n  const itemDataGet = async () => {\r\n    const { data, error, errorMessage } = await getItem();\r\n\r\n    if (error) {\r\n      const obj = JSON.stringify(errorMessage);\r\n      const errMessage = JSON.parse(obj)\r\n      console.log(errMessage);\r\n    }\r\n    if (data) {\r\n      setItemData(data);\r\n    }\r\n  }\r\n\r\n  return <>\r\n    <div className={styles.itemsContainer}>\r\n      <h2>Item List</h2>\r\n      <DataGrid\r\n        items={itemData}\r\n        columns={columns}\r\n        getRowId={(item) => item.id}\r\n        sortable\r\n        selectionMode=\"single\"\r\n        onSelectionChange={(_e, data) => {\r\n          const selectedArray = Array.from(data.selectedItems);\r\n          const selectedString = selectedArray[0];\r\n          navigate(`/items/${selectedString}`);\r\n        }}\r\n      >\r\n        <DataGridHeader style={{ paddingRight: scrollbarWidth }}>\r\n          <DataGridRow>\r\n            {({ renderHeaderCell }) => (\r\n              <DataGridHeaderCell>{renderHeaderCell()}</DataGridHeaderCell>\r\n            )}\r\n          </DataGridRow>\r\n        </DataGridHeader>\r\n        <DataGridBody<GetItemsResponse>\r\n          itemSize={60}\r\n          height={700}>\r\n          {renderRow}\r\n        </DataGridBody>\r\n      </DataGrid>\r\n\r\n    </div >\r\n  </>;\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"itemsContainer\":\"W6BK_FH47DwMqg964IFb\",\"descriptionContainer\":\"apKGFYWyFmPs_CnwkMjC\",\"classBadge\":\"rHortsjF4GT0cIlUnNBj\",\"actionsContainer\":\"_tq4_9MSyQfONzWU2gkp\"};","import React from \"react\";\r\n\r\nimport \"./styles/index.scss\";\r\nimport AppItems from \"./components/AppItems/Component\";\r\n\r\n\r\nconst App = () => {\r\n  return (\r\n    <>\r\n      <section className=\"hero\"></section>\r\n      <main>\r\n        <section>\r\n          <h1>AppItems</h1>\r\n        </section>\r\n        <AppItems />\r\n      </main>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import App from \"./App\"\r\nimport React from \"react\";\r\nimport {\r\n    RouterProvider,\r\n    createBrowserRouter\r\n} from \"react-router-dom\";\r\nimport { createRoot } from 'react-dom/client';\r\nimport { FluentProvider, teamsLightTheme } from '@fluentui/react-components';\r\n\r\nconst domNode = document.getElementById('root') as HTMLElement;\r\nconst root = createRoot(domNode);\r\n\r\nconst router = createBrowserRouter([\r\n    {\r\n        path: \"/\",\r\n        element: <App />,\r\n    },\r\n]);\r\n\r\nroot.render(\r\n    <React.StrictMode>\r\n        <FluentProvider theme={teamsLightTheme}>\r\n            <RouterProvider router={router} />\r\n        </FluentProvider>\r\n    </React.StrictMode>\r\n);"],"names":["request","url","method","requestPayload","config","fetch","headers","Accept","body","JSON","stringify","response","status","json","data","errorMessage","error","toString","get","post","put","batch","delete","getItem","columns","columnId","compare","a","b","code","localeCompare","renderHeaderCell","renderCell","item","value","description","arraySplit","split","filter","Boolean","TableCellLayout","className","map","classify","Badge","appearance","Button","icon","deleteable","renderRow","style","rowId","DataGridRow","key","DataGridCell","AppItems","targetDocument","scrollbarWidth","useScrollbarWidth","navigate","useState","itemData","setItemData","useEffect","itemDataGet","obj","errMessage","parse","console","log","DataGrid","items","getRowId","id","sortable","selectionMode","onSelectionChange","_e","selectedString","Array","from","selectedItems","DataGridHeader","paddingRight","DataGridHeaderCell","DataGridBody","itemSize","height","domNode","document","getElementById","root","router","path","element","render","FluentProvider","theme"],"sourceRoot":""}